name: Discord CICD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

#      - name: Cache Maven packages
#          uses: actions/cache@v3
#          with:
#            path: ~/.m2
#            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#            restore-keys: |
#              ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          GUILD_ID: ${{ secrets.GUILD_ID }}
          OWNER_ID: ${{ secrets.OWNER_ID }}
          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
          GPT_SECRET: ${{ secrets.GPT_SECRET }}
          
      - name: Login to Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/discordbotv3:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/discordbotv3:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Get EC2 Instance IP
        run: |
          EC2_IP=$(aws ec2 describe-instances \
                    --filters "Name=instance-id,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --query 'Reservations[0].Instances[0].PublicIpAddress' \
                    --output text)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV

      - name: Update SERVER_IP Secret
        run: |
          sudo npm install -g @octokit/core
          GITHUB_TOKEN=${{ secrets.TOKEN_GITHUB }}
          REPO=${{ github.repository }}
          OWNER=${REPO%%/*}
          REPO_NAME=${REPO##*/}
          node -e "
            const { Octokit } = require('@octokit/core');
            const octokit = new Octokit({ auth: process.env.TOKEN_GITHUB });
            octokit.request('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}', {
              owner: process.env.OWNER,
              repo: process.env.REPO_NAME,
              secret_name: 'SERVER_IP',
              data: { encrypted_value: process.env.EC2_IP, key_id: '' }
            });
          "

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/discordbotv3:latest
            sudo docker stop discordbot || true
            sudo docker rm discordbot || true
            sudo docker run -d --name discordbot -p 8080:8080 \
              -e DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
              -e GUILD_ID=${{ secrets.GUILD_ID }} \
              -e OWNER_ID=${{ secrets.OWNER_ID }} \
              -e YOUTUBE_SECRET=${{ secrets.YOUTUBE_SECRET }} \
              -e GPT_SECRET=${{ secrets.GPT_SECRET }} \
              ${{ secrets.DOCKER_USERNAME }}/discordbotv3:latest
